package com.kepu.controller;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alipay.api.AlipayClient;
import com.alipay.api.DefaultAlipayClient;
import com.alipay.api.domain.AlipayTradeAppPayModel;
import com.alipay.api.request.AlipayTradeAppPayRequest;
import com.alipay.api.response.AlipayTradeAppPayResponse;
import com.kepu.apppay.alipay.util.AlipayConfig;
import com.kepu.apppay.alipay.util.AlipayNotify;
import com.kepu.mapper.OrderInfoMapper;
import com.kepu.mapper.ProportionSettingMapper;
import com.kepu.mapper.StProductMapper;
import com.kepu.mapper.StUserMapper;
import com.kepu.pojo.OrderInfo;
import com.kepu.pojo.OrderInfoExample;
import com.kepu.pojo.ProportionSetting;
import com.kepu.pojo.StProduct;
import com.kepu.pojo.StUser;
import com.kepu.util.LocalDateUtil;


@Controller
@RequestMapping(value = "/alipay")
@Transactional
/**
 * 
 * @author Ly
 *
 */
public class Alipay_Controller {
	
	//入口
	private static final String GATEWAY = "https://openapi.alipaydev.com/gateway.do";
	//appid
	private static final String APP_ID = "2017072507895065";
	//商家私钥
	private static final String APP_PRIVATE_KEY = "MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC0eEzavxQEgcNz5Qi7en+pTYqBuq6iEFvAsAjRmt3edw7zhBpSLUenxVNAuyAyBq6WiLX4p+kjAExhiRHeY8mBZQUTgGZt+b9zPdZwKpGn7WOjK0IbGpfduH0OwVzija2aBsnSfeGIHGpook3+N7z3skXKztPpETyfKx0BEDeAK/3U/iC/hkkeJKvpa3a3eNVAo6vVAL0G5eAKQcku36cDYxqmMNGyXNOfRTsGpFYYyEgu9NLc1sHQdm8zm+xsACp7FTg1nVHBazthMwyFYg4Sfl1NbqxpM7sn7dHO6yiBeylu0JZK4g+eiqwAh75mEf/ih8uXb8hAMvh8CbjshMKVAgMBAAECggEAArnmf09vn/nN2AxXq21YTFhthTQquywAFtMR7wil3VxzD16pfyBL+s7SSSIKhHbxYDjEdvMiZHL2tGp7qJ5dRuUdxIOmCHdDWxxOBve9p4nAfZCDuSEXtjO5P+XP32RAgRklJ1bbd1DmkpoRD4wMALnisAOb0+N8xPLDx2ZVUExTT/IBNDBzwV69MihHandCYG+LmCjlt0I7L9tXAEM90jlVc1XT5jZTe843+obY9zh65ZCXTGaeq8oLnlZDJliESwcdqFEjSt4ZVO+QnH7iQRhf9EoH4mU30FQsC9oK0H8eJSLwZ4g8UtEehwQSLJMzVic1HwkJiURXFWo91OiKwQKBgQDoFtPMd3vW7UXA1hPk6RMmOExfaIamjsfpg5opxBMwKlgeOa77//kJ1jmoAxodXjyDCbFU//6aEn7w1JZEvqnfb3MBz5v5c5pNae4O0ndyZ/jC8vPR8c2s9Qjqg/UC7yWxT2nepZVPhuQFo3IXGwYsk/w6NhucVuKKVH/QjX4Q3QKBgQDHEA4a0z+6pBJ9NA9Gn61aS5fv7SAhzn+X3F56zP+kf0YHHIg9HvAFOd2aD70JIZtBQVLImJlM32XN6rB0UeJID2gcr8FRD+mzxmxpxapI7I6kAgwiPjmGTMGjiYQyXJDHLyc5VX1m3d8w7kFOLC125nP3M0JwndbN5P+AH1FBGQKBgQDkT4BvBaNHnQYfWvkbGMWDtaI7wQGk25SBfLqtF3ugyCcDJM+kivyb1qfFRbfs6AUzCtftvB7jxgomM5rXaZCGgoZqY6cWT8idGvXakuR6IRmv/XwpLWudFzd8K+9cwZEcyfhl1BH7t8CcY1saq7T5KWLYiN3EgBw+5D0QFgDL6QKBgHcHrqdzsiPUgAnF22yLhoj7srqQvCn65GjWKNidRDAEusb91KlXmoZFd7DrwEl5gvCeMvYn6WMCIknjD+g+HmSgcczVe28RaNlKyQDmZVB9wz1mzAKd2p/nvdIgJKBIoXm5RGcQK5AbE56amQo5eGYknystx4i3mP489FqUX23hAoGARmvmeduVM+cGYVD5bosLvxx3Bvjqu3BwQ91jME43K5C5l/ghC7nmtAQIzwQySfCBWi467CJCBRxDuuADIHnFqGoZhNVtv2FaLn81GMKGpBAWMQk1IQQKZAGEDlbPI6mYar3ty4/DamSGhx6ZWV2puUF9nZFWGhHn/R3NtnanT5o=";
	//格式
	private static final String FORMAT = "json";
	//编码
	private static final String CHARSET = "utf-8";
	//阿里公钥
	private static final String ALIPAY_PUBLIC_KEY = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAs1ubaWnelCgqB/YqvsiOobJH4gwRsm1Z8fsln0rm02tnbjR0MzKT6wFC3Qh2FfrMeY2JWlWZeHDsU7vIt9o2yX5rynSnryZdfk/UL/YwY9O3PzBbcSYgFAQkOkyCkfdTVp+mNMxvf9Dd90KNzorfykvHgHo6NgoxmCKJlvZ+T3BoiqDsW5Ku/yVYPJitqQFdxEEfucL202Ug88WiO1nwAQJ6cp+RKMp5GpQE3Vz+sTaRN4yYQAYWiMmZez3muka7ilFYbUB/YfRxCv3GyAroUVambp5n7zR4V12IdhvngeJVJWtCiE+IGL0YO1Uw2e7kvB2FFWuuPx27Sa4yYPxs0wIDAQAB";
	//加密类型
	private static final String SIGN_TYPE = "RSA2";
	@Autowired
	private OrderInfoMapper orderInfomapper;
	@Autowired
	private  StUserMapper stUserMapper;
	@Autowired
	private  StProductMapper stProductMapper;
	@Autowired
	private ProportionSettingMapper proportionSettingMapper;
	
	/**
	 * 预支付获取用户权限code
	 * 
	 * @param pay_type 支付方式1:余额支付2:微信支付3:支付宝,  order_des 订单留言, order_code 订单号 ,address 地址
	 * @return ModelAndView
	 * @throws IOException
	 */

	@RequestMapping(value = "/dopay")
	@ResponseBody
	public  String getCode(HttpServletRequest request1,
			HttpServletResponse response1) throws IOException {
		try {
		String  orderCode=request1.getParameter("order_code");
		AlipayClient alipayClient =	new DefaultAlipayClient(GATEWAY, APP_ID, APP_PRIVATE_KEY, FORMAT,CHARSET, ALIPAY_PUBLIC_KEY, SIGN_TYPE);
   //生成订单
		OrderInfoExample example=new OrderInfoExample();
		OrderInfoExample.Criteria criteria=example.createCriteria();
		criteria.andOrderCodeEqualTo(orderCode);
		List<OrderInfo> orderInfo2= orderInfomapper.selectByExample(example);
		OrderInfo orderInfo=orderInfo2.get(0);
		if(null!=orderInfo){
			if(orderInfo.getOrderStatu()==0){
			Integer buyUserId=orderInfo.getBuyUserId();//下单人  
			//获得商家商品内容开始
			Integer productId=Integer.valueOf(orderInfo.getProductId());//商品id
			Integer payType=Integer.valueOf(request1.getParameter("pay_type"));//支付方式
			StProduct stProduct= stProductMapper.selectByPrimaryKey(productId);//获取该商品详情
			BigDecimal money=stProduct.getMoney();//获取商品价格
			Integer sellUserId=stProduct.getUserid();//sellUserId 商家id
			String introduce=stProduct.getIntroduce();//商家说明
			//获得商家商品内容结束
			
			//获得用户详情开始
			StUser stUser =	stUserMapper.selectByPrimaryKey(buyUserId);
			String nickName= stUser.getNickname();//获取用户昵称
			String mobile= stUser.getMobile();//获取用户手机号
			//获得用户详情结束
			
			//放入OrderInfo开始
			orderInfo.setBalance(0.00);//默认积分抵扣数额为0.00
			orderInfo.setBillDesc("无");//默认发票备注为无
			orderInfo.setBillNum(Double.valueOf(orderInfo.getBillNum()));//商品数量默认为1
			orderInfo.setBillPrice(money.doubleValue());
			orderInfo.setBillTitle("无");//默认发票抬头为无
			Date date=LocalDateUtil.getNow();
			orderInfo.setCreateTime(date);
			orderInfo.setCredit(0.00);
			orderInfo.setProductId(String.valueOf(productId));
			if(null!=request1.getParameter("address")&&""!=request1.getParameter("address")){
				orderInfo.setOrderAddress(request1.getParameter("address"));
			}
//			String orderCode=String.valueOf(orderInfo.getOrderCode());
			orderInfo.setOrderCode(orderCode);
			orderInfo.setOrderDate(date);
			if(null!=request1.getParameter("order_des")&&""!=request1.getParameter("order_des")){
				orderInfo.setOrderDes(request1.getParameter("order_des"));//订单留言
			}
			orderInfo.setOrderNote(introduce);
			orderInfo.setOrderPhone(mobile);
			orderInfo.setOrderStatu(6);//增加订单状态:支付中
			orderInfo.setOrderUser(nickName);
			orderInfo.setBuyUserId(buyUserId);
			orderInfo.setPayType(payType);
			orderInfo.setSellUserId(sellUserId);
			ProportionSetting setting=proportionSettingMapper.selectByPrimaryKey(1);
			orderInfo.setRatio(setting.getPresentProportion());
			//放入OrderInfo结束
			//存入订单
			System.out.println(orderInfo.toString());
		int status=orderInfomapper.updateByPrimaryCode(orderInfo);
	//生成订单结束
		// 建立请求
			if(status>0){
//			String sHtmlText = AlipaySubmit.buildRequest(sParaTemp, "post",
//					"确认");
			AlipayTradeAppPayModel model = new AlipayTradeAppPayModel();
			AlipayTradeAppPayRequest request = new AlipayTradeAppPayRequest();
			model.setBody(stProduct.getIntroduce());
			model.setSubject(stProduct.getTitle()); //商品标题
	        model.setOutTradeNo(orderInfo.getOrderCode()); //商家订单编号
	        model.setTimeoutExpress("30m"); //超时关闭该订单时间
	        model.setTotalAmount(money.toString());  //订单总金额
	        model.setProductCode("QUICK_MSECURITY_PAY"); //销售产品码，商家和支付宝签约的产品码，为固定值QUICK_MSECURITY_PAY
	        request.setBizModel(model);
	        request.setNotifyUrl(AlipayConfig.service);  //回调地址
	        request.setReturnUrl("http://kp.appwzd.cn");
	        String orderStr = "";
	        AlipayTradeAppPayResponse response = alipayClient.execute(request);
	        orderStr = response.getBody();
	        System.out.println(orderStr);//就是orderString 可以直接给客户端请求，无需再做处理。
	        return orderStr;
			}
		}
		}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;

	}

	  @SuppressWarnings("rawtypes")

	  @RequestMapping(value="/async",method = RequestMethod.POST)

	  public String async(HttpServletRequest request,HttpServletResponse response){

	  Map params = new HashMap();  

	         Map requestParams = request.getParameterMap();  

	         for (Iterator iter = requestParams.keySet().iterator(); iter.hasNext();) {  

	             String name = (String) iter.next();  

	             String[] values = (String[]) requestParams.get(name); 

	             String valueStr = "";

	             for (int i = 0; i < values.length; i++) {  

	                 valueStr = (i == values.length - 1) ? valueStr + values[i]: valueStr + values[i] + ",";  

	             }  

	             params.put(name, valueStr);  

	         }  

	         //获取返回数据

	         String orderTitle = request.getParameter("subject");//订单名称

	         String payType = request.getParameter("payment_type");//支付类型

	         String outTradeNo = request.getParameter("out_trade_no");//订单号

	         String tradeNo = request.getParameter("trade_no");//支付宝交易号

	         String notifyId = request.getParameter("notify_id");//支付校验id

	         String amount = request.getParameter("total_fee");//交易金额

	         String notifyTime = request.getParameter("notify_time");//通知时间       

	         String tradeStatus = request.getParameter("trade_status");//交易状态

	         String returnId = request.getParameter("extra_common_param");//项目id

	         String payer = request.getParameter("buyer_email");//支付者账号              

	                  //

	         if(AlipayNotify.verify(params)){//验证成功  

	             if(tradeStatus.equals("TRADE_FINISHED") || tradeStatus.equals("TRADE_SUCCESS")) {  

	             //要写的逻辑。自己按自己的要求写

	             

	             //封装交易信息实体，存入数据库之类的                                               

	                  System.out.println(">>>>>异步返回:" + tradeNo);  

	             }  

	             return "success/alipay-success";  

	         }else{//验证失败  

	             return "success/alipay-fail";  

	         }  

	  }

	

	@RequestMapping(value = "/return_url", method = RequestMethod.GET)
	public String Return_url(HttpServletRequest request,
			HttpServletResponse response) {

		Map params = new HashMap();

		Map requestParams = request.getParameterMap();

		for (Iterator iter = requestParams.keySet().iterator(); iter.hasNext();) {

			String name = (String) iter.next();

			String[] values = (String[]) requestParams.get(name);

			String valueStr = "";

			for (int i = 0; i < values.length; i++) {

				valueStr = (i == values.length - 1) ? valueStr + values[i]
						: valueStr + values[i] + ",";

			}

			params.put(name, valueStr);

		}

		String tradeNo = request.getParameter("trade_no");// 支付宝交易号

		String tradeStatus = request.getParameter("trade_status");// 交易状态

		if (AlipayNotify.verify(params)) {// 验证成功

			if (tradeStatus.equals("TRADE_FINISHED")
					|| tradeStatus.equals("TRADE_SUCCESS")) {

				// 要写的逻辑。自己按自己的要求写

				System.out.println(">>>>>充值成功" + tradeNo);

			}

			return "...";

		} else {// 验证失败

			return "success/fail";

		}

	}

}
