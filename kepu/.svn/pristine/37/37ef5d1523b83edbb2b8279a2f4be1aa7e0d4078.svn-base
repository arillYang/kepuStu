package com.kepu.controller;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.alibaba.druid.support.logging.Log;
import com.alibaba.druid.support.logging.LogFactory;
import com.kepu.constant.ResultConstant;
import com.kepu.mapper.OrderInfoMapper;
import com.kepu.mapper.StUserMapper;
import com.kepu.mapper.UserAddressMapper;
import com.kepu.pojo.KePuResult;
import com.kepu.pojo.OrderInfo;
import com.kepu.pojo.PageBean;
import com.kepu.pojo.StUser;
import com.kepu.pojo.UserAddress;
import com.kepu.pojo.WithdrawCash;
import com.kepu.service.AddressService;
import com.kepu.service.UserService;
import com.kepu.service.WithdrawCashService;
import com.kepu.util.LocalDateUtil;
import com.kepu.util.PageUtil;
import com.kepu.util.StringUtil;

@Controller
@RequestMapping("/address")
public class AddressController {
	@Autowired
	private OrderInfoMapper orderInfomapper;
	@Autowired
	private AddressService addressService;
	@Autowired
	private UserService userService;
	@Autowired
	private UserAddressMapper userAddressMapper;
	@Autowired
	private WithdrawCashService withdrawCashService;
	@Autowired
	private StUserMapper stUserMapper;

	protected final Log logger = LogFactory.getLog(AddressController.class);

	// 查询订单列表
	@SuppressWarnings("unchecked")
	@RequestMapping("addressList")
	@ResponseBody
	public Object addressList(@RequestParam(value = "page", required = false) String page, UserAddress userAddress,
			HttpServletRequest request) {
		HttpSession session = request.getSession();
		if (StringUtil.isEmpty(page)) {
			page = "1";
			session.setAttribute("userAddress", userAddress);
		} else {
			userAddress = (UserAddress) session.getAttribute("userAddress");
		}
		PageBean pageBean = new PageBean(Integer.parseInt(page), 10);
		Map<String, Object> map = addressService.findUserAddress(pageBean, userAddress);
		List<OrderInfo> addressList = (List<OrderInfo>) map.get("list");
		return KePuResult.ok(ResultConstant.code_ok, "获取列表成功", addressList);
	}

	// 修改订单跳转
	@RequestMapping("selectAddress")
	@ResponseBody
	public Object selectAddress(HttpServletRequest request) {
		String addressId = request.getParameter("addressId");
		UserAddress address = userAddressMapper.selectByPrimaryKey(Integer.parseInt(addressId));
		return KePuResult.ok(ResultConstant.code_ok, "查询地址成功", address);
	}

	// 修改地址提交
	@RequestMapping("updateCommit")
	@ResponseBody
	public Object UpdateCommit(HttpServletRequest request, UserAddress userAddress) {
		Date date=LocalDateUtil.getNow();
		userAddress.setUpdateTime(date);
		int s = userAddressMapper.updateByPrimaryKeySelective(userAddress);
		if (s > 0)
			return KePuResult.ok(ResultConstant.code_ok, "更改地址成功", "");
		return KePuResult.ok(ResultConstant.code_exception, "更改失败", "");
	}
	
	@RequestMapping("withdrawCashList")
	@ResponseBody
	public Object withdrawCashList(@RequestParam(value="page",required=false)String page,WithdrawCash withdrawCash,HttpServletRequest request){
		ModelAndView mav=new ModelAndView();
		HttpSession session=request.getSession();
		if(StringUtil.isEmpty(page)){
			page="1";
			session.setAttribute("withdrawCash", withdrawCash);
		}else{
			withdrawCash=(WithdrawCash) session.getAttribute("withdrawCash");
		}
		PageBean pageBean=new PageBean(Integer.parseInt(page),10);
		Map<String,Object> map=withdrawCashService.findWithdrawCash(pageBean, withdrawCash);
		List<WithdrawCash> withdrawCashList=(List<WithdrawCash>) map.get("list");
		return KePuResult.ok(ResultConstant.code_ok, "获取列表成功", withdrawCashList);
	}
}
