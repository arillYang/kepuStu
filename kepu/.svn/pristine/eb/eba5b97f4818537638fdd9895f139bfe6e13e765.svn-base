package com.kepu.controller;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.kepu.constant.ResultConstant;
import com.kepu.dao.JedisClient;
import com.kepu.pojo.DeviceMessage;
import com.kepu.pojo.KePuResult;
import com.kepu.pojo.StProduct;
import com.kepu.pojo.StUser;
import com.kepu.pojo.StVillage;
import com.kepu.pojo.good.Good;
import com.kepu.pojo.news.ZheJiang;
import com.kepu.service.ProductService;
import com.kepu.service.UserService;
import com.kepu.util.ExceptionUtil;
import com.kepu.util.JsonUtils;
import com.kepu.util.StringUtil;
import com.kepu.util.SystemSession;

@Controller
@RequestMapping("/product")
public class ProductController {

	@Autowired
	private ProductService productService;
	@Autowired
	private UserService userService;
	@Autowired
	private JedisClient jedisClient;
	
	private static final Logger LOG = Logger.getLogger(ProductController.class);
	/**
	 * ��ȡ�ֲ�ͼ 
	 * @return
	 */
	@RequestMapping(value="getCarousel")
	public @ResponseBody Object getCarousel(@RequestParam(required=false) Integer classfyId){
		try {
			// classfyId=null  ��Ϊ��ҳ�ֲ�  ����Ϊ�����ֲ�
			return productService.getCarousel(5,classfyId);
		} catch (Exception e) {
			return KePuResult.build(ResultConstant.code_exception, ExceptionUtil.getStackTrace(e),"");
		}
	}
	
	
	/**
	 * ��ȡ���в�Ʒ����
	 * @return
	 */
	@RequestMapping(value="getProductClassfy")
	public @ResponseBody Object getProductClassfy(){
		try {
			return productService.getProductClassfy();
		} catch (Exception e) {
			return KePuResult.build(ResultConstant.code_exception, ExceptionUtil.getStackTrace(e),"");
		}
	}
	
	/**
	 * ��ȡ���в�Ʒ�б�
	 * @return
	 */
	@RequestMapping(value="getHomeProduct/{page}")
	public @ResponseBody Object getHomeProduct(@PathVariable Integer page){
		try {
			/*DeviceMessage device=SystemSession.get();
			if(device!=null&&StringUtil.isNotEmpty(device.getAppVersion())&&device.getAppVersion().compareTo("6.0.0")>=0){
				return productService.getHomeProductNew(page, 10);
			}else*/
			return productService.getHomeProduct(page, 10);
		} catch (Exception e) {
			return KePuResult.build(ResultConstant.code_exception, ExceptionUtil.getStackTrace(e),"");
		}
	}
	
	/**
	 * ��ȡ�����Ʒ�б�
	 * @return
	 */
	@RequestMapping(value="getClassfyProduct/{classfyId}/{page}")
	public @ResponseBody Object getClassfyProduct(@PathVariable Integer classfyId,@PathVariable Integer page,
			@RequestParam(required=false) Integer all,
			@RequestParam(required=false) Integer distance,
			@RequestParam(required=false) Integer money,
			@RequestParam(required=false) Integer time){
		try {
			//all �ۺ�����	0������1������
			//distance ��������	0�������룻1��Զ����
			//money �۸�����	0�����ˣ�1����
			//time ʱ������	0��ʱ�����1��ʱ��Զ
			
			//GeohashUtils.encodeLatLon();
			/*if(distance!=null){
				String lon=map.get("lon");
				String lat=map.get("lat");
			}*/
			return productService.getClassfyProduct(classfyId, page, 20, all, distance, money, time);
		} catch (Exception e) {
			return KePuResult.build(ResultConstant.code_exception, ExceptionUtil.getStackTrace(e),"");
		}
	}
	
	
	/**
	 * ������Ʒ
	 * @return
	 */
	@RequestMapping(value="searchProduct/{page}")
	public @ResponseBody Object searchProduct(@PathVariable Integer page,
			@RequestParam(required=false) String q,
			@RequestParam(required=false) Integer all,
			@RequestParam(required=false) Integer distance,
			@RequestParam(required=false) Integer money,
			@RequestParam(required=false) Integer time){
		try {
			// q ������
			//all �ۺ�����	0������1������
			//distance ��������	0�������룻1��Զ����
			//money �۸�����	0�����ˣ�1����
			//time ʱ������	0��ʱ�����1��ʱ��Զ
			if(page==1)
				productService.addHotSearch(q);
			return productService.searchProduct(q, page, 20, all, distance, money, time);
		} catch (Exception e) {
			return KePuResult.build(ResultConstant.code_exception, ExceptionUtil.getStackTrace(e),"");
		}
	}
	/**
	 * ��ȡ��Ʒ����
	 * @return
	 */
	@RequestMapping(value="getProductDetail/{productId}")
	public @ResponseBody Object getProductDetail(@PathVariable Integer productId){
		try {
			
			return productService.getProductDetail(productId);
		} catch (Exception e) {
			return KePuResult.build(ResultConstant.code_exception, ExceptionUtil.getStackTrace(e),"");
		}
	}
	/**
	 * ��ȡ���з���
	 * @return
	 */
	@RequestMapping(value="getServiceKind")
	public @ResponseBody Object getServiceKind(HttpServletRequest request){
		try {
			int type=1;  //Ĭ�ϰ�׿   1��׿ 2IOS
			String application=(String) request.getAttribute("application");
			String appVersion=(String) request.getAttribute("appVersion");
			if(StringUtil.isNotEmpty(application)){
				if(application.equalsIgnoreCase("IOS"))
					type=2;
			}
			return productService.getServiceKind(type,appVersion);
		} catch (Exception e) {
			return KePuResult.build(ResultConstant.code_exception, ExceptionUtil.getStackTrace(e),"");
		}
	}
	
	
	/**
	 * ��ȡ�����б�  ���ְ�׿��IOS
	 * @return
	 */
	@RequestMapping(value="getOutChainList")
	public @ResponseBody Object getOutChainList(HttpServletRequest request,@RequestParam(required=false) Integer tabId){
		try {
			int type=1;  //Ĭ�ϰ�׿   1��׿ 2IOS
			String application=(String) request.getAttribute("application");
			if(StringUtil.isNotEmpty(application)){
				if(application.equalsIgnoreCase("IOS"))
					type=2;
			}
			return productService.getOutChainList(type,tabId==null?11:tabId);
		} catch (Exception e) {
			return KePuResult.build(ResultConstant.code_exception, ExceptionUtil.getStackTrace(e),"");
		}
	}
	
	/**
	 * �ϴ���Ʒ
	 * @param map
	 * @return
	 */
	@RequestMapping(value="publishProduct",method=RequestMethod.POST)
	public @ResponseBody Object publishProduct(@RequestBody Map<String, Object> map,HttpServletRequest request){
		try {
			String token=request.getHeader("baseParams")==null?"":request.getHeader("baseParams");
			long t=jedisClient.incr("QPS_Product"+token);
			//String temp=jedisClient.get("QPS_Product"+token);
			if(t==1){
				jedisClient.expire("QPS_Product"+token, 5);
			}else{
				return KePuResult.build(ResultConstant.code_yewu, "����̫Ƶ��,���Ժ�����", "");
			}
			LOG.info(map.toString());
			// ������ȡ�û���Ϣ
			StUser stUser2 = userService.getUserByToken(token);
			if(stUser2==null){
				return KePuResult.build(ResultConstant.code_yewu, "�û�id����", "");
			}
			StUser stUser=userService.getUserById(stUser2.getUserid());
			String title="";
			String introduce="";
			String price="";
			String address="";
			String mobile="";
			String detailPics="";
			String coverPic="";
			String classfyId="";
			String classfyName="";
			String userName="";
			StringBuffer sb=new StringBuffer();
			String appVersion=(String) request.getAttribute("appVersion");
			// 6.0.0�汾����
			if(StringUtil.isEmpty(appVersion)||StringUtil.isNotEmpty(appVersion)&&appVersion.compareTo("6.0.0")<0){
				if(map.containsKey("introduce")){
					introduce=(String) map.get("introduce");
				}else{
					sb.append("introduce").append(",");
				}
				if(map.containsKey("detailPics"))
					detailPics=(String) map.get("detailPics");
				else{
					sb.append("detailPics").append(",");
				}
				if(map.containsKey("classfyId"))
					classfyId=(String) map.get("classfyId");
				else{
					sb.append("classfyId").append(",");
				}
				if(map.containsKey("classfyName"))
					classfyName=(String) map.get("classfyName");
				else{
					sb.append("classfyName").append(",");
				}
			}else{
				List<HashMap<String, String>> goods=(List<HashMap<String, String>>) map.get("goods");
				StringBuffer pics=new StringBuffer();
				StringBuffer desc=new StringBuffer();
				for (HashMap<String, String> hashMap : goods) {
					if(hashMap.get("goodsDesc").contains("<br/>"))
						return KePuResult.build(ResultConstant.code_yewu, "�����Ƿ��ַ�", "");
					pics.append(hashMap.get("goodsDescImg")).append(",");
					desc.append(hashMap.get("goodsDesc")).append("<br/>");
				}
				introduce=desc.length()==0?"":desc.delete(desc.length()-5, desc.length()).toString();
				detailPics=pics.length()==0?"":pics.deleteCharAt(pics.length()-1).toString();
				classfyId="5";
				classfyName="��Ʒ����";
			}
			if(map.containsKey("title")){
				title=(String) map.get("title");
			}else{
				sb.append("title").append(",");
			}
			if(map.containsKey("price"))
				price=(String) map.get("price");
			else{
				sb.append("price").append(",");
			}
			if(map.containsKey("address"))
				address=(String) map.get("address");
			else{
				sb.append("address").append(",");
			}
			if(map.containsKey("mobile")){
				mobile=(String) map.get("mobile");
				/*if(mobile.length()>12)
					return KePuResult.build(ResultConstant.code_param, ResultConstant.mobile_error, "");*/
			}
			else{
				sb.append("mobile").append(",");
			}
			if(map.containsKey("coverPic"))
				coverPic=(String) map.get("coverPic");
			else{
				sb.append("coverPic").append(",");
			}
			
			if(map.containsKey("userName"))
				userName=(String) map.get("userName");
			else{
				sb.append("userName").append(",");
			}
			if(sb.length()!=0){
				return KePuResult.build(ResultConstant.code_param, "���²�������Ϊ��"+sb.toString(), "");	
			}
			StProduct product=new StProduct();
			product.setCreatetime(new Date());
			product.setClassfyid(Integer.valueOf(classfyId));
			product.setTitle(title);
			product.setAddress(address);
			product.setClassfyname(classfyName);
			// ƴ��
			product.setIntroduce(introduce);
			product.setMobile(mobile);
			product.setCoverpic(coverPic);
			// ƴ��
			product.setDetailpics(detailPics);
			try {
				product.setMoney(new BigDecimal(price));
			} catch (Exception e) {
				return KePuResult.build(ResultConstant.code_param, "�۸���������", "");	
			}
			product.setUserid(stUser.getUserid());
			product.setAvatar(stUser.getAvatar());
			product.setUsername(userName);
			product.setVillageid(stUser.getArea());
			return  productService.publishProduct(product);
		} catch (Exception e) {
			return KePuResult.build(ResultConstant.code_exception, ExceptionUtil.getStackTrace(e),"");
		}
	}
	
	
	/**
	 * �޸���Ʒ
	 * @param map
	 * @return
	 */
	@RequestMapping(value="editProduct",method=RequestMethod.POST)
	public @ResponseBody Object editProduct(@RequestBody Map<String, Object> map,HttpServletRequest request){
		try {
			String token=request.getHeader("baseParams")==null?"":request.getHeader("baseParams");
			// ������ȡ�û���Ϣ
			StUser stUser2 = userService.getUserByToken(token);
			if(stUser2==null){
				return KePuResult.build(ResultConstant.code_yewu, "�û�id����", "");
			}
			StUser stUser=userService.getUserById(stUser2.getUserid());
			String title="";
			String introduce="";
			String price="";
			String address="";
			String mobile="";
			String detailPics="";
			String coverPic="";
			String classfyId="";
			String classfyName="";
			String userName="";
			StringBuffer sb=new StringBuffer();
			
			String productId=(String) map.get("productId");
			if(StringUtil.isEmpty(productId))
				return KePuResult.build(ResultConstant.code_param, "productId����Ϊ��"+sb.toString(), "");
			StProduct product = productService.getProductById(Integer.valueOf(productId));
			if(product==null||product.getState()==1)
				return KePuResult.build(ResultConstant.code_param, "����Ʒ�ѱ�ɾ���򲻴���"+sb.toString(), "");
			int userId=product.getUserid();
			int real=stUser2.getUserid();
			if(userId!=real)
				return KePuResult.build(ResultConstant.code_param, "ֻ�з����߲������޸���Ʒ"+sb.toString(), "");
			String appVersion=(String) request.getAttribute("appVersion");
			if(StringUtil.isEmpty(appVersion)||StringUtil.isNotEmpty(appVersion)&&appVersion.compareTo("6.0.0")<0){
				if(map.containsKey("introduce")){
					introduce=(String) map.get("introduce");
					product.setIntroduce(introduce);
				}
				if(map.containsKey("detailPics")){
					detailPics=(String) map.get("detailPics");
					product.setDetailpics(detailPics);
				}
			}else{
				if(map.containsKey("goods")){
					List<HashMap<String, String>> goods=(List<HashMap<String, String>>) map.get("goods");
					StringBuffer pics=new StringBuffer();
					StringBuffer desc=new StringBuffer();
					for (HashMap<String, String> hashMap : goods) {
						if(hashMap.get("goodsDesc").contains("<br/>"))
							return KePuResult.build(ResultConstant.code_yewu, "�����Ƿ��ַ�", "");
						pics.append(hashMap.get("goodsDescImg")).append(",");
						desc.append(hashMap.get("goodsDesc")).append("<br/>");
					}
					introduce=desc.length()==0?"":desc.delete(desc.length()-5, desc.length()).toString();
					detailPics=pics.length()==0?"":pics.deleteCharAt(pics.length()-1).toString();
					product.setIntroduce(introduce);
					product.setDetailpics(detailPics);
				}
			}
			if(map.containsKey("title")){
				title=(String) map.get("title");
				product.setTitle(title);
			}
			if(map.containsKey("price")){
				price=(String) map.get("price");
				product.setMoney(new BigDecimal(price));
			}
			if(map.containsKey("address")){
				address=(String) map.get("address");
				product.setAddress(address);
			}
			if(map.containsKey("mobile")){
				mobile=(String) map.get("mobile");
				/*if(mobile.length()>12)
					return KePuResult.build(ResultConstant.code_param, ResultConstant.mobile_error, "");*/
				product.setMobile(mobile);
			}
			if(map.containsKey("coverPic")){
				coverPic=(String) map.get("coverPic");
				product.setCoverpic(coverPic);
			}
			if(map.containsKey("classfyId")&&map.containsKey("classfyName")){
				classfyId=(String) map.get("classfyId");
				classfyName=(String) map.get("classfyName");
				product.setClassfyid(Integer.valueOf(classfyId));
				product.setClassfyname(classfyName);
			}
			if(map.containsKey("userName")){
				userName=(String) map.get("userName");
				product.setUsername(userName);
			}
			product.setCreatetime(new Date());
			productService.editProduct(product);
			return KePuResult.ok(ResultConstant.code_ok, "�޸ĳɹ�", "");
		} catch (Exception e) {
			return KePuResult.build(ResultConstant.code_exception, ExceptionUtil.getStackTrace(e),"");
		}
	}
	
	/**
	 * ��ȡ������/�ҵķ���  ������Ʒ
	 * @return
	 */
	@RequestMapping(value="getAllPublish/{page}")
	public @ResponseBody Object getAllPublish(@PathVariable Integer page,
			@RequestParam(required=false) Integer userId,HttpServletRequest request){
		try {
			//userId Ϊ�գ����ʾ��ȡ�ҵķ���   
			String token=request.getHeader("baseParams")==null?"":request.getHeader("baseParams");
			StUser stUser2 = userService.getUserByToken(token);
			/*if(stUser2==null){
				return KePuResult.build(ResultConstant.code_yewu, "�û�id����", "");
			}*/
			Integer my=stUser2==null?-1:stUser2.getUserid();
			return productService.getAllProduct(userId==null?my:userId,page,20);
		} catch (Exception e) {
			return KePuResult.build(ResultConstant.code_exception, ExceptionUtil.getStackTrace(e),"");
		}
	}
	
	/**
	 * ��ȡ�ҵ��ղ� ��Ʒ
	 * @return
	 */
	@RequestMapping(value="getMyCollection/{page}")
	public @ResponseBody Object getMyCollection(@PathVariable Integer page,
			@RequestParam(required=false) Integer userId,HttpServletRequest request){
		try { 
			String token=request.getHeader("baseParams")==null?"":request.getHeader("baseParams");
			StUser stUser2 = userService.getUserByToken(token);
			if(stUser2==null){
				return KePuResult.build(ResultConstant.code_yewu, "�û�id����", "");
			}
			Integer my=stUser2.getUserid();
			return productService.getMyCollection(my,page,20);
		} catch (Exception e) {
			return KePuResult.build(ResultConstant.code_exception, ExceptionUtil.getStackTrace(e),"");
		}
	}
	
	/**
	 * �ղ���Ʒ
	 * @return
	 */
	@RequestMapping(value="likeProduct")
	public @ResponseBody Object likeProduct(@RequestBody Map<String, String> map,HttpServletRequest request){
		try {
			String token=request.getHeader("baseParams")==null?"":request.getHeader("baseParams"); 
			StUser user=userService.getUserByToken(token);
			StringBuffer sb=new StringBuffer();
			if(user==null){
				return KePuResult.ok(ResultConstant.code_yewu, "�û�ID����", "");
			}
			String productId=map.get("productId");
			if(StringUtil.isEmpty(productId))
				return KePuResult.build(ResultConstant.code_param, "productId����Ϊ��", "");
			StProduct product = productService.getProductById(Integer.valueOf(productId));
			if(product==null)
				return KePuResult.build(ResultConstant.code_param, "��Ʒ��ɾ���򲻴���", "");
			
			return productService.likeProduct(user.getUserid(),Integer.valueOf(productId));
		} catch (Exception e) {
			return KePuResult.build(ResultConstant.code_exception, ExceptionUtil.getStackTrace(e),"");
		}
	}
	
	/**
	 * ɾ���ղص���Ʒ
	 * @return
	 */
	@RequestMapping(value="delete/likeProduct")
	public @ResponseBody Object deletelikeProduct(@RequestBody Map<String, String> map,HttpServletRequest request){
		try {
			String token=request.getHeader("baseParams")==null?"":request.getHeader("baseParams"); 
			StUser user=userService.getUserByToken(token);
			StringBuffer sb=new StringBuffer();
			if(user==null){
				return KePuResult.ok(ResultConstant.code_yewu, "�û�ID����", "");
			}
			String productIds=map.get("productIds");
			if(map.containsKey("productIds"))
				productIds=map.get("productIds");
			else{
				sb.append("productIds").append(",");
			}
			if(sb.length()!=0){
				return KePuResult.build(ResultConstant.code_param, "���²�������Ϊ��"+sb.toString(), "");
			}
			String[] ps=productIds.split(",");
			return productService.deletelikeProducts(user.getUserid(),ps);
		} catch (Exception e) {
			return KePuResult.build(ResultConstant.code_exception, ExceptionUtil.getStackTrace(e),"");
		}
	}
	
	/**
	 *  ����λ���㽭ʡ
	 */
	@RequestMapping(value="getProductArea")
	public @ResponseBody Object getProductArea() { 
		return KePuResult.ok(ResultConstant.code_ok, "��ȡ�ɹ�", ZheJiang.getZheJiang());
	}
	
	
	
	/**
	 * ��ȡ���Ѵʻ�
	 * @return
	 */
	@RequestMapping(value="getHotSearch")
	public @ResponseBody Object getHotSearch(HttpServletRequest request){
		try {
			return productService.getHotSearch();
		} catch (Exception e) {
			return KePuResult.build(ResultConstant.code_exception, ExceptionUtil.getStackTrace(e),"");
		}
	}
}
