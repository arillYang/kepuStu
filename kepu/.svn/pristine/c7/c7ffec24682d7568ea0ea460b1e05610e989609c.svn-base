package com.kepu.controller;


import java.math.BigDecimal;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.alibaba.druid.support.logging.Log;
import com.alibaba.druid.support.logging.LogFactory;
import com.kepu.constant.ResultConstant;
import com.kepu.mapper.OrderInfoMapper;
import com.kepu.mapper.ProportionSettingMapper;
import com.kepu.mapper.StProductMapper;
import com.kepu.mapper.StUserAccountMapper;
import com.kepu.mapper.StUserMapper;
import com.kepu.pojo.KePuResult;
import com.kepu.pojo.OrderInfo;
import com.kepu.pojo.PageBean;
import com.kepu.pojo.ProportionSetting;
import com.kepu.pojo.StProduct;
import com.kepu.pojo.StUser;
import com.kepu.service.OrderService;
import com.kepu.service.UserService;
import com.kepu.util.LocalDateUtil;
import com.kepu.util.StringUtil;

@Controller
@RequestMapping("/order")
public class OrderController {
	@Autowired
	private OrderInfoMapper orderInfomapper;
	@Autowired
	private OrderService orderService;
	@Autowired
	private UserService userService;
	@Autowired
	private StUserMapper stUserMapper;
	@Autowired
	private StProductMapper stProductMapper;
	@Autowired
	private StUserAccountMapper stUserAccountMapper;
	@Autowired
	private ProportionSettingMapper proportionSettingMapper;

	protected final Log logger = LogFactory.getLog(OrderController.class);
	
	// 查询订单列表
	@SuppressWarnings("unchecked")
	@RequestMapping("orderList")
	public Object orderList(@RequestParam(value="page",required=false)String page,OrderInfo orderInfo,HttpServletRequest request){
		ModelAndView mav=new ModelAndView();
		HttpSession session=request.getSession();
		if(StringUtil.isEmpty(page)){
			page="1";
			session.setAttribute("orderInfo", orderInfo);
		}else{
			orderInfo=(OrderInfo) session.getAttribute("orderInfo");
		}
		PageBean pageBean=new PageBean(Integer.parseInt(page),10);
		Map<String,Object> map=orderService.findOrderInfo(pageBean, orderInfo);
		List<OrderInfo> orderInfoList=(List<OrderInfo>) map.get("list");
//		long total=(Long) map.get("total");
//		String pageCo de=PageUtil.getPagation(request.getContextPath()+"/order/orderList",  new Long(total).intValue(), Integer.parseInt(page), 10);
	    map.put("list", orderInfoList);
		return KePuResult.ok(ResultConstant.code_ok, "订单列表", map);
	}
		// 查询某订单
		@RequestMapping("findOrderById")
		public ModelAndView findOrderBy(HttpServletRequest request){
			String orderid=request.getParameter("order_id");
			ModelAndView mav=new ModelAndView();
			 OrderInfo  order=orderInfomapper.selectByPrimaryKey(Integer.parseInt(orderid));
			//通过购买者的ID，查询对应的用户名
			StUser stUser = userService.getUserById(order.getBuyUserId());					//查找用户信息
			if(null!=stUser.getNickname()){
				 mav.addObject("BuyUserName",stUser.getNickname());
			} 
			StUser stUser2 = userService.getUserById(order.getSellUserId());					//查找用户信息
			 mav.addObject("SellUser",stUser2);
			 mav.addObject("order", order);
			 mav.addObject("mainPage","order/order_details.jsp");
			 mav.setViewName("main");
			return mav;
		}
	
				
		      /* // 取消订单
				@RequestMapping("deleteOrder")
				public ModelAndView deleteOrder(@RequestParam(value="id",required=false)String id,HttpServletRequest request){
					ModelAndView mav=new ModelAndView();
					String orderid=request.getParameter("order_id");
					 OrderInfo  order=orderInfomapper.selectByPrimaryKey(Integer.parseInt(orderid));
					 mav.addObject("order", order);
					 mav.addObject("mainPage","order/order_cancel.jsp");
					 mav.setViewName("main");
					return mav;
				}*/
				
				@RequestMapping("selectOrder")
				public ModelAndView selectOrder(HttpServletRequest request){
					ModelAndView mav=new ModelAndView();
					Map<String,String> map =request.getParameterMap();
					System.out.println();
					List<OrderInfo> order=orderInfomapper.selectOrder(map);
					mav.addObject("order", order);
					mav.addObject("mainPage", "order/orderList.jsp");
					mav.setViewName("main");
					return mav;
				}
				/**
				 * 返回到订单列表里面
				 * @param request
				 * @return
				 */
				@RequestMapping("selectReturn")
				public String selectReturn(){
					return "redirect:orderList";
				}
				/**
				 * 返回到ajax
				 * @param request
				 * @return
				 */
				@RequestMapping("updateStatus")
				@ResponseBody
				public int updateStatus(HttpServletRequest request){
					String orderId=request.getParameter("orderId");
					String orderStatu=request.getParameter("orderStatu");
					Map map=new HashMap<>();
					map.put("orderStatu", orderStatu);
					map.put("orderId", orderId);
					orderInfomapper.updateStatus(map);
					int a=200;
					return a;
				}
				
				/**
				 * 生成订单
				 * @param request buy_user_id 下单人 ,product_id 商品id,pay_type 支付方式2:微信支付3:支付宝,order_des 订单留言 
				 * @return
				 */
				@RequestMapping("creatOrder")
				public ModelAndView creatOrder(HttpServletRequest request){
					OrderInfo orderInfo=new OrderInfo();
					String order_des=request.getParameter("order_des");
					Integer buyUserId=Integer.valueOf(request.getParameter("buy_user_id"));//下单人
					//获得商家商品内容开始
					Integer productId=Integer.valueOf(request.getParameter("product_id"));//商品id
					Integer payType=Integer.valueOf(request.getParameter("pay_type"));//支付方式
					StProduct stProduct= stProductMapper.selectByPrimaryKey(productId);//获取该商品详情
					BigDecimal money=stProduct.getMoney();//获取商品价格
					Integer sellUserId=stProduct.getUserid();//sellUserId 商家id
					String introduce=stProduct.getIntroduce();//商家说明
					//获得商家商品内容结束
					
					//获得用户详情开始
					StUser stUser =	stUserMapper.selectByPrimaryKey(buyUserId);
					String nickName= stUser.getNickname();//获取用户昵称
					String address= stUser.getAddress();//获取用户地址
					String mobile= stUser.getMobile();//获取用户手机号
					Integer state=stUser.getState();//获取用户状态
					//获得用户详情结束
					
					//放入OrderInfo开始
					orderInfo.setBalance(0.00);//默认积分抵扣数额为0.00
					orderInfo.setBillDesc("无");//默认发票备注为无
					orderInfo.setBillNum(1.00);//商品数量默认为1
					orderInfo.setBillPrice(money.doubleValue());
					orderInfo.setBillTitle("无");//默认发票抬头为无
					Date date=LocalDateUtil.getNow();
					orderInfo.setCreateTime(date);
					orderInfo.setCredit(0.00);
					orderInfo.setOrderAddress(address);
					orderInfo.setOrderCode(String.valueOf(new Date().getTime()));
					orderInfo.setOrderDate(date);
					orderInfo.setOrderDes(order_des);//订单留言
					orderInfo.setOrderNote(introduce);
					orderInfo.setOrderPhone(mobile);
					orderInfo.setOrderStatu(6);//增加订单状态:支付中
					orderInfo.setOrderUser(nickName);
					orderInfo.setBuyUserId(buyUserId);
					orderInfo.setPayType(payType);
					orderInfo.setSellUserId(sellUserId);
					ProportionSetting setting=proportionSettingMapper.selectByPrimaryKey(1);
					orderInfo.setRatio(setting.getPresentProportion());
					//放入OrderInfo结束
					//存入订单
					int status=orderInfomapper.insert(orderInfo);
					ModelAndView mv=new ModelAndView();
					if(status>0){
						mv.addObject("orderInfo",orderInfo);
						if(payType==2){//微信支付
//							mv.setViewName("redirect:/alipay/dopay");
							return mv;
						}else if(payType==3){//支付宝支付
							mv.setViewName("redirect:/alipay/dopay");
							return mv;
						}
					}
					mv.addObject("msg","下单失败!");
					return mv;
				}
				
}

